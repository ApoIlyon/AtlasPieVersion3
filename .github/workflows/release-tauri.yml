name: Release Tauri (Windows)

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (SemVer, e.g. 0.5.0)'
        required: true
      title:
        description: 'Release title (defaults to AtlasPie vX.Y.Z)'
        required: false
      notes:
        description: 'Release notes (Markdown)'
        required: false

jobs:
  release:
    name: Build & publish Windows installer
    runs-on:
      - self-hosted
      - Windows
      - X64
    env:
      TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
      TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
      AUTOHOTPIE_UPDATE_TOKEN: ${{ secrets.AUTOHOTPIE_UPDATE_TOKEN }}
      CARGO_TERM_COLOR: always
      RUST_BACKTRACE: 1
      TAURI_TARGET: x86_64-pc-windows-msvc
      RELEASE_VERSION: ${{ github.event.inputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: autohotpie-tauri/package-lock.json

      - name: Install npm dependencies
        working-directory: autohotpie-tauri
        run: npm ci

      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          target: x86_64-pc-windows-msvc

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~\\.cargo\\registry
            ~\\.cargo\\git
            autohotpie-tauri\\src-tauri\\target
          key: ${{ runner.os }}-cargo-${{ hashFiles('autohotpie-tauri/src-tauri/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Prepare release metadata
        id: metadata
        working-directory: autohotpie-tauri
        shell: powershell
        run: |
          $title = "${{ github.event.inputs.title }}"
          if ([string]::IsNullOrWhiteSpace($title)) {
            $title = "AtlasPie v${{ github.event.inputs.version }}"
          }
          $notes = "${{ github.event.inputs.notes }}"
          if ([string]::IsNullOrWhiteSpace($notes)) {
            $notes = "Release notes will be added later."
          }
          $outputPath = $Env:GITHUB_OUTPUT
          if ([string]::IsNullOrWhiteSpace($outputPath)) {
            $tempRoot = if ([string]::IsNullOrWhiteSpace($Env:RUNNER_TEMP)) { Join-Path $PWD '..\_temp' } else { $Env:RUNNER_TEMP }
            if (-not (Test-Path $tempRoot)) {
              New-Item -ItemType Directory -Path $tempRoot -Force | Out-Null
            }
            $outputPath = Join-Path $tempRoot 'github_output.txt'
            $Env:GITHUB_OUTPUT = $outputPath
          }
          $outputDir = Split-Path $outputPath -Parent
          if (-not (Test-Path $outputDir)) {
            New-Item -ItemType Directory -Path $outputDir -Force | Out-Null
          }
          if (-not (Test-Path $outputPath)) {
            New-Item -ItemType File -Path $outputPath -Force | Out-Null
          }
          Add-Content -Path $outputPath -Encoding UTF8 -Value "title=$title"
          Add-Content -Path $outputPath -Encoding UTF8 -Value "notes=$notes"

      - name: Verify version consistency
        working-directory: autohotpie-tauri
        shell: pwsh
        run: |
          $pkg = Get-Content package.json -Raw | ConvertFrom-Json
          $cargo = Get-Content src-tauri/Cargo.toml -Raw
          if ($cargo -notmatch 'version\s*=\s*"([^"]+)"') {
            Write-Error 'Version not found in Cargo.toml'
            exit 1
          }
          $cargoVersion = $Matches[1]
          if ($pkg.version -ne $cargoVersion) {
            Write-Error "Version mismatch between package.json ($($pkg.version)) and Cargo.toml ($cargoVersion)"
            exit 1
          }
          if ($pkg.version -ne $env:RELEASE_VERSION) {
            Write-Error "Input version $env:RELEASE_VERSION does not match project version $($pkg.version)"
            exit 1
          }

      - name: Build and publish release
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          projectPath: autohotpie-tauri
          tagName: v${{ github.event.inputs.version }}
          releaseName: ${{ steps.metadata.outputs.title }}
          releaseBody: ${{ steps.metadata.outputs.notes }}
          releaseDraft: false
          prerelease: false
          includeUpdaterJson: true
          updaterJsonPreferNsis: true
          args: --target ${{ env.TAURI_TARGET }}
